{"version":3,"sources":["components/PostCard/PostCard.tsx","components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","components/NewCommentForm.tsx","api/comments.ts","components/CommentCard/CommentCard.tsx","components/PostDetails.tsx","components/UserOption/UserOption.tsx","components/UserSelector.tsx","api/users.ts","components/ErrorsNotification/ErrorsNotification.tsx","App.tsx","api/posts.ts","index.tsx"],"names":["PostCard","_ref","post","loadPost","setSelectedPost","selectedPost","btnTitle","id","_jsxs","children","_jsx","title","className","type","classNames","onClick","postId","PostsList","posts","map","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","arguments","length","undefined","data","options","body","JSON","stringify","headers","then","fetch","response","ok","Error","json","client","NewCommentForm","loadComments","_useState","useState","_useState2","_slicedToArray","name","setName","_useState3","_useState4","email","setEmail","_useState5","_useState6","text","setText","_useState7","_useState8","nameError","setNameError","_useState9","_useState10","emailError","setEmailError","_useState11","_useState12","textError","setTextError","_useState13","_useState14","isSubmiting","setIsSubmiting","reset","onSubmit","e","preventDefault","trim","comment","newComment","finally","onReset","htmlFor","placeholder","value","onChange","target","CommentCard","deleteComment","href","concat","commentId","PostDetails","comments","setComments","isLoading","setIsLoading","isError","setIsError","isNewCommentForm","setIsNewCommentForm","getComments","catch","useEffect","removeComment","newComments","filter","c","_Fragment","UserOption","user","selectedId","selectUserHandler","UserSelector","setSelectedUser","loadPosts","setError","selectedUser","users","setUsers","isSelectOpen","setIsSelectOpen","role","ErrorsNotification","error","App","setPosts","userId","getPosts","getPost","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1f1a37c1.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport { Post } from '../../types/Post';\n\ntype Props = {\n  post: Post;\n  loadPost: (id: number) => void;\n  setSelectedPost: (post: Post | null) => void;\n  selectedPost: Post | null,\n};\n\nexport const PostCard: React.FC<Props> = ({\n  post,\n  loadPost,\n  setSelectedPost,\n  selectedPost,\n}) => {\n  const btnTitle = selectedPost?.id !== post.id ? 'Open' : 'Close';\n\n  const openPostHandler = (postId: number) => {\n    if (btnTitle === 'Open') {\n      loadPost(postId);\n    } else {\n      setSelectedPost(null);\n    }\n  };\n\n  return (\n    <tr data-cy=\"Post\">\n      <td data-cy=\"PostId\">{post.id}</td>\n\n      <td data-cy=\"PostTitle\">\n        {post.title}\n      </td>\n\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          type=\"button\"\n          data-cy=\"PostButton\"\n          className={classNames('button is-link', {\n            'is-light': selectedPost?.id !== post.id,\n          })}\n          onClick={() => openPostHandler(post.id)}\n        >\n          {btnTitle}\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import React from 'react';\nimport { Post } from '../types/Post';\nimport { PostCard } from './PostCard/PostCard';\n\ntype Props = {\n  posts: Post[];\n  loadPost: (id: number) => void;\n  setSelectedPost: (post: Post | null) => void;\n  selectedPost: Post | null,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  loadPost,\n  setSelectedPost,\n  selectedPost,\n}) => (\n  <div data-cy=\"PostsList\">\n    <p className=\"title\">Posts:</p>\n\n    <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n      <thead>\n        <tr className=\"has-background-link-light\">\n          <th>#</th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {posts.map(post => (\n          <PostCard\n            post={post}\n            key={post.id}\n            loadPost={loadPost}\n            setSelectedPost={setSelectedPost}\n            selectedPost={selectedPost}\n          />\n        ))}\n      </tbody>\n    </table>\n  </div>\n);\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable */\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { createComment } from '../api/comments';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  postId: number;\n  loadComments: (postId: number) => void;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ postId, loadComments }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [text, setText] = useState('');\n  const [nameError, setNameError] = useState(false);\n  const [emailError, setEmailError] = useState(false);\n  const [textError, setTextError] = useState(false);\n  const [isSubmiting, setIsSubmiting] = useState(false);\n\n  const changeName = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setName(e.target.value);\n    setNameError(false);\n  };\n\n  const changeEmail = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setEmail(e.target.value);\n    setEmailError(false);\n  };\n\n  const changeText = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setText(e.target.value);\n    setTextError(false);\n  };\n\n  const reset = () => {\n    setName('');\n    setEmail('');\n    setText('');\n    setNameError(false);\n    setEmailError(false);\n    setTextError(false);\n  };\n\n  const onSubmitHandler = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    setNameError(!name.trim().length);\n    setEmailError(!email.trim().length);\n    setTextError(!text.trim().length);\n\n    if (!name.trim().length || !email.trim().length || !text.trim().length) {\n      return;\n    }\n\n    const newComment: Omit<Comment, 'id'> = {\n      name,\n      email,\n      body: text,\n      postId,\n    };\n\n    setIsSubmiting(true);\n\n    createComment(newComment)\n      .then(() => {\n        loadComments(postId);\n      })\n      .finally(() => {\n        setIsSubmiting(false);\n      });\n\n    reset();\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={onSubmitHandler}\n      onReset={reset}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', {\n              'is-danger': !!nameError,\n            })}\n            value={name}\n            onChange={changeName}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {!!nameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {!!nameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', {\n              'is-danger': !!emailError,\n            })}\n            value={email}\n            onChange={changeEmail}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {!!emailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {!!emailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', {\n              'is-danger': !!textError,\n            })}\n            value={text}\n            onChange={changeText}\n          />\n        </div>\n\n        {!!textError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button is-link', {\n              'is-loading': isSubmiting,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button type=\"reset\" className=\"button is-link is-light\">\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { client } from '../utils/fetchClient';\nimport { Comment } from '../types/Comment';\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const removeComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n\nexport const createComment = (comment: Omit<Comment, 'id'>) => {\n  return client.post('/comments', comment);\n};\n","import React from 'react';\nimport { Comment } from '../../types/Comment';\n\ntype Props = {\n  comment: Comment;\n  deleteComment: (id: number) => void;\n};\n\nexport const CommentCard: React.FC<Props> = ({ comment, deleteComment }) => {\n  const deleteCommentHandler = (commentId: number) => {\n    deleteComment(commentId);\n  };\n\n  return (\n    <article className=\"message is-small\" data-cy=\"Comment\">\n      <div className=\"message-header\">\n        <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n          {comment.name}\n        </a>\n        <button\n          data-cy=\"CommentDelete\"\n          type=\"button\"\n          className=\"delete is-small\"\n          aria-label=\"delete\"\n          onClick={() => deleteCommentHandler(comment.id)}\n        >\n          delete button\n        </button>\n      </div>\n\n      <div className=\"message-body\" data-cy=\"CommentBody\">\n        {comment.body}\n      </div>\n    </article>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Post } from '../types/Post';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Comment } from '../types/Comment';\nimport { getComments, removeComment } from '../api/comments';\nimport { CommentCard } from './CommentCard/CommentCard';\n\ntype Props = {\n  post: Post;\n};\n\nexport const PostDetails: React.FC<Props> = ({ post }) => {\n  const [comments, setComments] = useState<Comment[] | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [isNewCommentForm, setIsNewCommentForm] = useState(false);\n\n  const loadComments = (postId: number) => {\n    getComments(postId)\n      .then(data => {\n        setComments(data);\n      })\n      .catch(() => {\n        setIsError(true);\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n    setIsError(false);\n\n    loadComments(post.id);\n  }, [post.id]);\n\n  const deleteComment = (commentId: number) => {\n    setIsLoading(true);\n    setIsError(false);\n\n    removeComment(commentId)\n      .then(() => {\n        if (comments) {\n          const newComments: Comment[] = comments\n            .filter(c => c.id !== commentId);\n\n          setComments(newComments);\n        }\n      })\n      .catch(() => {\n        setIsError(true);\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${post.id}: ${post.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {post.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoading && (\n            <Loader />\n          )}\n\n          {isError && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {!comments?.length ? (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          ) : (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n\n              {comments.map(comment => (\n                <CommentCard\n                  comment={comment}\n                  deleteComment={deleteComment}\n                  key={comment.id}\n                />\n              ))}\n            </>\n          )}\n\n          <button\n            data-cy=\"WriteCommentButton\"\n            type=\"button\"\n            className=\"button is-link\"\n            onClick={() => setIsNewCommentForm(true)}\n          >\n            Write a comment\n          </button>\n        </div>\n\n        {isNewCommentForm && (\n          <NewCommentForm\n            postId={post.id}\n            loadComments={loadComments}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport { User } from '../../types/User';\n\ntype Props = {\n  user: User;\n  selectedId: number | null;\n  selectUserHandler: (\n    e: React.MouseEvent<HTMLAnchorElement>,\n    user: User\n  ) => void;\n};\n\nexport const UserOption: React.FC<Props> = ({\n  user,\n  selectedId,\n  selectUserHandler,\n}) => {\n  return (\n    <a\n      href={`#user-${user.id}`}\n      className={classNames('dropdown-item', {\n        'is-active': selectedId === user.id,\n      })}\n      onClick={(e) => selectUserHandler(e, user)}\n    >\n      {user.name}\n    </a>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { getUsers } from '../api/users';\nimport { Post } from '../types/Post';\nimport { User } from '../types/User';\nimport { UserOption } from './UserOption/UserOption';\n\ntype Props = {\n  selectedId: number | null;\n  setSelectedUser: (user: User | null) => void;\n  loadPosts: (id: number) => void;\n  setIsLoading: (value: boolean) => void;\n  setError: (error: string) => void;\n  selectedUser: User | null;\n  setSelectedPost: (post: Post | null) => void;\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  selectedId,\n  setSelectedUser,\n  loadPosts,\n  setIsLoading,\n  setError,\n  selectedUser,\n  setSelectedPost,\n}) => {\n  const [users, setUsers] = useState<User[] | null>(null);\n  const [isSelectOpen, setIsSelectOpen] = useState(false);\n\n  useEffect(() => {\n    if (isSelectOpen) {\n      setIsLoading(true);\n\n      getUsers()\n        .then(data => {\n          setUsers(data);\n        })\n        .catch(() => {\n          setError(\n            'User can\\'t be selected. Please, check internet connection',\n          );\n        })\n        .finally(() => {\n          setIsLoading(false);\n        });\n    }\n  }, [isSelectOpen]);\n\n  const selectUserHandler = (\n    e: React.MouseEvent<HTMLAnchorElement>,\n    user: User,\n  ) => {\n    e.preventDefault();\n\n    setSelectedPost(null);\n    setSelectedUser(user);\n    setIsSelectOpen(false);\n    loadPosts(user.id);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsSelectOpen(!isSelectOpen)}\n        >\n          <span>\n            {selectedUser?.name || 'Choose a user'}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      {isSelectOpen && (\n        <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n          <div className=\"dropdown-content\">\n            {users?.length && users.map(user => (\n              <UserOption\n                user={user}\n                selectedId={selectedId}\n                selectUserHandler={selectUserHandler}\n              />\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import React, { useEffect } from 'react';\n\ntype Props = {\n  error: string;\n  setError: (value: string) => void;\n};\n\nexport const ErrorsNotification: React.FC<Props> = ({ error, setError }) => {\n  useEffect(() => {\n    setTimeout(() => {\n      setError('');\n    }, 3000);\n  }, []);\n\n  return (\n    <div\n      className=\"notification is-danger\"\n      data-cy=\"PostsLoadingError\"\n    >\n      {error}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { getPost, getPosts } from './api/posts';\nimport {\n  ErrorsNotification,\n} from './components/ErrorsNotification/ErrorsNotification';\n\nexport const App: React.FC = () => {\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [error, setError] = useState('');\n  const [posts, setPosts] = useState<Post[] | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const loadPosts = (userId: number) => {\n    setIsLoading(true);\n\n    getPosts(userId)\n      .then(data => {\n        setPosts(data);\n      })\n      .catch(() => {\n        setError('Unable to load posts');\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  };\n\n  const loadPost = (postId: number) => {\n    getPost(postId)\n      .then(data => {\n        setSelectedPost(data);\n      })\n      .catch(() => {\n        setError('Post detail can\\'t be loaded');\n      });\n  };\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  selectedId={selectedUser?.id || null}\n                  setSelectedUser={setSelectedUser}\n                  loadPosts={loadPosts}\n                  setIsLoading={setIsLoading}\n                  setError={setError}\n                  selectedUser={selectedUser}\n                  setSelectedPost={setSelectedPost}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoading && (\n                  <Loader />\n                )}\n\n                {error && (\n                  <ErrorsNotification\n                    error={error}\n                    setError={setError}\n                  />\n                )}\n\n                {selectedUser && !posts?.length && (\n                  <div\n                    className=\"notification is-warning\"\n                    data-cy=\"NoPostsYet\"\n                  >\n                    No posts yet\n                  </div>\n                )}\n\n                {!!posts?.length && (\n                  <PostsList\n                    posts={posts}\n                    loadPost={loadPost}\n                    setSelectedPost={setSelectedPost}\n                    selectedPost={selectedPost}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar', {\n                'Sidebar--open': !!selectedPost,\n              },\n            )}\n          >\n            <div className=\"tile is-child box is-success\">\n              {selectedPost && (\n                <PostDetails post={selectedPost} />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n\nexport const getPost = (postId: number) => {\n  return client.get<Post>(`/posts/${postId}`);\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}